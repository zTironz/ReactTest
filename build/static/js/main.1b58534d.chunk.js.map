{"version":3,"sources":["components/Message.js","App.js","serviceWorker.js","index.js"],"names":["Message","state","isLiked","counter","handleClick","bind","console","log","this","setState","props","name","logo","title","text","date","Date","displayDate","getDate","getMonth","getFullYear","btnClassName","className","src","alt","onClick","React","Component","App","userData","axios","get","then","res","data","results","to","path","exact","map","picture","location","id","first","last","thumbnail","country","city","key","value","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"+UA6FeA,G,wDAvFb,aAAe,IAAD,8BACV,gBAEKC,MAAQ,CACTC,SAAS,EACTC,QAAS,GAEb,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBAPT,E,gEAWZC,QAAQC,IAAI,uI,6CAIZD,QAAQC,IAAI,0G,oCAKC,IAAD,EACeC,KAAKP,MAAzBC,EADK,EACLA,QAASC,EADJ,EACIA,QAChBK,KAAKC,SAAS,CAAEP,SAAUA,EAASC,QAASA,EAAU,M,+BAG9C,IAAD,EAC2BK,KAAKE,MAAhCC,EADA,EACAA,KAAMC,EADN,EACMA,KAAMC,EADZ,EACYA,MAAOC,EADnB,EACmBA,KADnB,EAEoBN,KAAKP,MAAzBC,EAFA,EAEAA,QAASC,EAFT,EAESA,QACVY,EAAO,IAAIC,KACXC,EAAW,UAAMF,EAAKG,UAAX,YAAwBH,EAAKI,WAAa,EAA1C,YAA+CJ,EAAKK,eACrEd,QAAQC,IAAIQ,GACZT,QAAQC,IAAIL,GACZ,IAAMmB,EAAY,gCAA4BnB,EAAU,YAAc,IACtE,OACI,yBAAKoB,UAAU,WACb,yBAAKA,UAAU,kBACb,yBAAKC,IAAKX,EAAMY,IAAI,GAAGF,UAAU,yBACjC,yBAAKA,UAAU,6BACb,uBAAGA,UAAU,wBAAwBX,GACrC,0BAAMW,UAAU,uBAAuBL,IAEzC,0BAAMK,UAAU,0BAA0BnB,GAC1C,4BACAmB,UAAWD,EACXI,QAASjB,KAAKJ,eAGhB,yBAAKkB,UAAU,gBACb,wBAAIA,UAAU,sBACXT,GAEH,uBAAGS,UAAU,wBACVR,S,GArDOY,IAAMC,YCwFbC,E,kDArEb,WAAYlB,GAAQ,IAAD,8BACjB,cAAMA,IAEDT,MAAQ,CACX4B,SAAU,IAJK,E,gEAQE,IAAD,OAClBC,IAAMC,IApBE,wCAqBLC,MAAK,SAACC,GACL,EAAKxB,SAAS,CAAEoB,SAAUI,EAAIC,KAAKC,e,+BAI/B,IACAN,EAAarB,KAAKP,MAAlB4B,SAER,OADAvB,QAAQC,IAAIsB,EAAU,aAEpB,kBAAC,IAAD,KACE,yBAAKP,UAAU,cACb,wBAAIA,UAAU,mBACZ,4BACE,kBAAC,IAAD,CAAMc,GAAG,IAAId,UAAU,mBAAvB,SAIF,4BACE,kBAAC,IAAD,CAAMc,GAAG,SAASd,UAAU,mBAA5B,UAIF,4BACE,kBAAC,IAAD,CAAMc,GAAG,UAAUd,UAAU,mBAA7B,UAMN,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOe,KAAK,IAAIC,OAAK,GACrB,yBAAKhB,UAAU,OAChBO,EAASU,KAAI,YAAsC,IAAnC5B,EAAkC,EAAlCA,KAAM6B,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,SAAUC,EAAS,EAATA,GACxC,OACE,kBAAC,EAAD,CACF/B,KAAI,UAAKA,EAAKgC,MAAV,YAAmBhC,EAAKiC,MAC5BhC,KAAM4B,EAAQK,UACdhC,MAAO4B,EAASK,QAChBhC,KAAM2B,EAASM,KACfC,IAAKN,EAAGO,aAMR,kBAAC,IAAD,CAAOZ,KAAK,UAAZ,UAGA,kBAAC,IAAD,CAAOA,KAAK,WAAZ,uB,GA3DQX,IAAMC,WCXJuB,QACW,cAA7BC,OAAOV,SAASW,UAEe,UAA7BD,OAAOV,SAASW,UAEhBD,OAAOV,SAASW,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7B,MAAK,SAAA8B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3D,QAAQ2D,MAAMA,EAAMC,c","file":"static/js/main.1b58534d.chunk.js","sourcesContent":["import React from 'react';\nimport './Message.css';\n\n\n\nclass Message extends React.Component {\n  constructor() {\n      super();\n\n      this.state = {\n          isLiked: false,\n          counter: 0\n      };\n      this.handleClick = this.handleClick.bind(this);\n  }\n\n  componentDidMount() {\n    console.log('я сейчас буду собираться');\n  }\n\n  componentWillUnmount() {\n    console.log('я буду разбираться (');\n  }\n\n\n\n  handleClick() {\n    const {isLiked, counter} = this.state;\n    this.setState({ isLiked: !isLiked, counter: counter + 1})\n  }\n\n  render() {\n    const {name, logo, title, text} = this.props;\n    const {isLiked, counter} = this.state;\n    const date = new Date();\n    const displayDate = `${date.getDate()}/${date.getMonth() + 1}/${date.getFullYear()}`;\n    console.log(date);\n    console.log(isLiked);\n    const btnClassName = `message-header-button ${isLiked ? 'is-active' : ''}`\n    return (\n        <div className=\"message\">\n          <div className='message-header'>\n            <img src={logo} alt='' className='message-header-image' />\n            <div className=\"message-header-text_block\">\n              <p className=\"message-header-title\">{name}</p>\n              <span className=\"message-header-date\">{displayDate}</span>\n            </div>\n            <span className=\"message-header-counter\">{counter}</span>\n            <button \n            className={btnClassName}\n            onClick={this.handleClick}\n            />\n          </div>\n          <div className=\"message-body\">\n            <h2 className=\"message-body-title\">\n              {title}\n            </h2>\n            <p className=\"message-body-content\">\n              {text}\n            </p>\n          </div>\n        </div>\n    );\n  }\n  \n}\n\n// function Message(props) {\n//     const {name, logo, title, text} = props;\n//     const date = new Date();\n//     const displayDate = `${date.getDate()}/${date.getMonth() + 1}/${date.getFullYear()}`;\n//     console.log(date);\n//     return (\n//         <div className=\"message\">\n//           <div className='message-header'>\n//             <img src={logo} alt='' className='message-header-image' />\n//             <div className=\"message-header-text_block\">\n//               <p className=\"message-header-title\">{name}</p>\n//               <span className=\"message-header-date\">{displayDate}</span>\n//             </div>\n//           </div>\n//           <div className=\"message-body\">\n//             <h2 className=\"message-body-title\">\n//               {title}\n//             </h2>\n//             <p className=\"message-body-content\">\n//               {text}\n//             </p>\n//           </div>\n//         </div>\n//     );\n//   }\n\nexport default Message;","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from 'react-router-dom';\nimport axios from 'axios';\n\n// import logo from './logo.svg';\nimport './App.css';\nimport Message from './components/Message';\n\nconst API = 'https://randomuser.me/api?results=50';\n\n// const data = [\n//   {id: 1, name: 'Vasya', logo, title: 'Title', text: 'Hello World'},\n//   {id: 2, name: 'Oleg', logo, title: 'Lol Oleg', text: 'Hello Peace'},\n//   {id: 3, name: 'Maria', logo, title: 'Maria Lol', text: 'Hello'}\n// ]\n\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      userData: [],\n    };\n  }\n\n  componentDidMount() {\n    axios.get(API)\n      .then((res) =>{\n        this.setState({ userData: res.data.results });\n      });\n  }\n\n  render() {\n    const { userData } = this.state;\n    console.log(userData, 'user data');\n    return (\n      <Router>\n        <nav className=\"navigation\">\n          <ul className=\"navigation-list\">\n            <li>\n              <Link to=\"/\" className=\"navigation-link\">\n              Home\n              </Link>\n            </li>\n            <li>\n              <Link to=\"/hello\" className=\"navigation-link\">\n              Hello\n              </Link>\n            </li>\n            <li>\n              <Link to=\"/signin\" className=\"navigation-link\">\n              Reg\n              </Link>\n            </li>\n          </ul>\n        </nav>\n        <Switch>\n          <Route path=\"/\" exact>\n          <div className=\"App\">\n        {userData.map(({ name, picture, location, id }) => {\n          return (\n            <Message \n          name={`${name.first} ${name.last}`}\n          logo={picture.thumbnail}\n          title={location.country}\n          text={location.city}\n          key={id.value}\n          /> \n          ) \n        })}\n      </div>\n          </Route>\n          <Route path=\"/hello\">\n            Hello!\n          </Route>\n          <Route path=\"/signin\">\n            Registattion!\n          </Route>\n        </Switch>\n      </Router>\n      \n    );\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}